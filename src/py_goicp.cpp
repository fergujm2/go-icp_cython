/* Generated by Cython 0.29.6 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_6"
#define CYTHON_HEX_VERSION 0x001D06F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__py_goicp
#define __PYX_HAVE_API__py_goicp
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <utility>
#include <set>
#include <vector>
#include <map>
#include "autowrap_tools.hpp"
#include "boost/smart_ptr/shared_ptr.hpp"
#include "jly_goicp.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING "ascii  # for cython>=0.19"
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "py_goicp.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_8py_goicp_GoICP;
struct __pyx_obj_8py_goicp_POINT3D;
struct __pyx_obj_8py_goicp_ROTNODE;
struct __pyx_obj_8py_goicp_TRANSNODE;
struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData;
struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr;
struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr;

/* "py_goicp.pyx":25
 *     char * _cast_const_away(char *)
 * 
 * cdef class GoICP:             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of _GoICP
 */
struct __pyx_obj_8py_goicp_GoICP {
  PyObject_HEAD
  boost::shared_ptr<GoICP>  inst;
};


/* "py_goicp.pyx":201
 *         self.inst.get().setDTSizeAndFactor((<int>in_0), (<double>in_1))
 * 
 * cdef class POINT3D:             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of _POINT3D
 */
struct __pyx_obj_8py_goicp_POINT3D {
  PyObject_HEAD
  boost::shared_ptr<POINT3D>  inst;
};


/* "py_goicp.pyx":275
 *         self.inst.get().pointToString()
 * 
 * cdef class ROTNODE:             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of _ROTNODE
 */
struct __pyx_obj_8py_goicp_ROTNODE {
  PyObject_HEAD
  boost::shared_ptr<ROTNODE>  inst;
};


/* "py_goicp.pyx":367
 *         self.inst = shared_ptr[_ROTNODE](new _ROTNODE())
 * 
 * cdef class TRANSNODE:             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of _TRANSNODE
 */
struct __pyx_obj_8py_goicp_TRANSNODE {
  PyObject_HEAD
  boost::shared_ptr<TRANSNODE>  inst;
};


/* "py_goicp.pyx":161
 *         return py_result
 * 
 *     def loadModelAndData(self,  in_0 , list in_1 ,  in_2 , list in_3 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */
struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData {
  PyObject_HEAD
  PyObject *__pyx_v_in_1;
  PyObject *__pyx_v_in_3;
};


/* "py_goicp.pyx":164
 *         """Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 *         assert isinstance(in_3, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_3), 'arg in_3 wrong type'
 */
struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_goicp.pyx":166
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 *         assert isinstance(in_3, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_3), 'arg in_3 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_POINT3D] * v1 = new libcpp_vector[_POINT3D]()
 */
struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'AutowrapRefHolder' */

/* Module declarations from 'AutowrapPtrHolder' */

/* Module declarations from 'AutowrapConstPtrHolder' */

/* Module declarations from 'smart_ptr' */

/* Module declarations from 'goicpcc' */

/* Module declarations from 'py_goicp' */
static PyTypeObject *__pyx_ptype_8py_goicp_GoICP = 0;
static PyTypeObject *__pyx_ptype_8py_goicp_POINT3D = 0;
static PyTypeObject *__pyx_ptype_8py_goicp_ROTNODE = 0;
static PyTypeObject *__pyx_ptype_8py_goicp_TRANSNODE = 0;
static PyTypeObject *__pyx_ptype_8py_goicp___pyx_scope_struct__loadModelAndData = 0;
static PyTypeObject *__pyx_ptype_8py_goicp___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_8py_goicp___pyx_scope_struct_2_genexpr = 0;
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const std::vector<std::vector<double> >  &); /*proto*/
#define __Pyx_MODULE_NAME "py_goicp"
extern int __pyx_module_is_main_py_goicp;
int __pyx_module_is_main_py_goicp = 0;

/* Implementation of 'py_goicp' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_args[] = "args";
static const char __pyx_k_in_0[] = "in_0";
static const char __pyx_k_in_1[] = "in_1";
static const char __pyx_k_in_2[] = "in_2";
static const char __pyx_k_in_3[] = "in_3";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_GoICP[] = "GoICP";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_init_0[] = "_init_0";
static const char __pyx_k_init_1[] = "_init_1";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_POINT3D[] = "POINT3D";
static const char __pyx_k_ROTNODE[] = "ROTNODE";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_py_goicp[] = "py_goicp";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TRANSNODE[] = "TRANSNODE";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_arg_in_0_wrong_type[] = "arg in_0 wrong type";
static const char __pyx_k_arg_in_1_wrong_type[] = "arg in_1 wrong type";
static const char __pyx_k_arg_in_2_wrong_type[] = "arg in_2 wrong type";
static const char __pyx_k_arg_in_3_wrong_type[] = "arg in_3 wrong type";
static const char __pyx_k_can_not_handle_type_of_s[] = "can not handle type of %s";
static const char __pyx_k_loadModelAndData_locals_genexpr[] = "loadModelAndData.<locals>.genexpr";
static const char __pyx_k_self_inst_cannot_be_converted_to[] = "self.inst cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_GoICP;
static PyObject *__pyx_n_s_POINT3D;
static PyObject *__pyx_n_s_ROTNODE;
static PyObject *__pyx_n_s_TRANSNODE;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_arg_in_0_wrong_type;
static PyObject *__pyx_kp_s_arg_in_1_wrong_type;
static PyObject *__pyx_kp_s_arg_in_2_wrong_type;
static PyObject *__pyx_kp_s_arg_in_3_wrong_type;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_s_can_not_handle_type_of_s;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_in_0;
static PyObject *__pyx_n_s_in_1;
static PyObject *__pyx_n_s_in_2;
static PyObject *__pyx_n_s_in_3;
static PyObject *__pyx_n_s_init_0;
static PyObject *__pyx_n_s_init_1;
static PyObject *__pyx_n_s_loadModelAndData_locals_genexpr;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_py_goicp;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_kp_s_self_inst_cannot_be_converted_to;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static void __pyx_pf_8py_goicp_5GoICP___dealloc__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_2Nm___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_Nm); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_2Nm_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_2Nd___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_Nd); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_2Nd_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_9MSEThresh___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_MSEThresh); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_9MSEThresh_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_9SSEThresh___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_SSEThresh); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_9SSEThresh_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_9icpThresh___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_icpThresh); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_9icpThresh_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_12trimFraction___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_trimFraction); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_12trimFraction_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_9timeLimit___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_timeLimit); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_9timeLimit_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_9inlierNum___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_inlierNum); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_9inlierNum_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_6doTrim___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_doTrim); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_6doTrim_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_5GoICP_2__init__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_4Register(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_6BuildDT(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_8optimalRotation(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_10optimalTranslation(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_16loadModelAndData_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_16loadModelAndData_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_12loadModelAndData(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1, PyObject *__pyx_v_in_2, PyObject *__pyx_v_in_3); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_14setInitNodeRot(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_16setInitNodeTrans(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_18setDTSizeAndFactor(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_in_0, double __pyx_v_in_1); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_5GoICP_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_8py_goicp_7POINT3D___dealloc__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7POINT3D_1x___set__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, float __pyx_v_x); /* proto */
static PyObject *__pyx_pf_8py_goicp_7POINT3D_1x_2__get__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7POINT3D_1y___set__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, float __pyx_v_y); /* proto */
static PyObject *__pyx_pf_8py_goicp_7POINT3D_1y_2__get__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7POINT3D_1z___set__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, float __pyx_v_z); /* proto */
static PyObject *__pyx_pf_8py_goicp_7POINT3D_1z_2__get__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_7POINT3D_2_init_0(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_7POINT3D_4_init_1(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, float __pyx_v_in_0, float __pyx_v_in_1, float __pyx_v_in_2); /* proto */
static int __pyx_pf_8py_goicp_7POINT3D_6__init__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8py_goicp_7POINT3D_8pointToString(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_7POINT3D_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_7POINT3D_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_8py_goicp_7ROTNODE___dealloc__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7ROTNODE_1a___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1a_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7ROTNODE_1b___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_b); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1b_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7ROTNODE_1c___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_c); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1c_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7ROTNODE_1w___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_w); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1w_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7ROTNODE_2ub___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_ub); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_2ub_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7ROTNODE_2lb___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_lb); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_2lb_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7ROTNODE_1l___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, PyObject *__pyx_v_l); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1l_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_7ROTNODE_2__init__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_7ROTNODE_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_8py_goicp_9TRANSNODE___dealloc__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_9TRANSNODE_1x___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_x); /* proto */
static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_1x_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_9TRANSNODE_1y___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_y); /* proto */
static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_1y_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_9TRANSNODE_1z___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_z); /* proto */
static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_1z_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_9TRANSNODE_1w___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_w); /* proto */
static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_1w_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_9TRANSNODE_2ub___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_ub); /* proto */
static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_2ub_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_9TRANSNODE_2lb___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_lb); /* proto */
static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_2lb_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static int __pyx_pf_8py_goicp_9TRANSNODE_2__init__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8py_goicp_GoICP(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8py_goicp_POINT3D(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8py_goicp_ROTNODE(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8py_goicp_TRANSNODE(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8py_goicp___pyx_scope_struct__loadModelAndData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8py_goicp___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8py_goicp___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
/* Late includes */

/* "py_goicp.pyx":32
 *     cdef shared_ptr[_GoICP] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_8py_goicp_5GoICP_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8py_goicp_5GoICP_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8py_goicp_5GoICP___dealloc__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8py_goicp_5GoICP___dealloc__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "py_goicp.pyx":33
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "py_goicp.pyx":32
 *     cdef shared_ptr[_GoICP] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_goicp.pyx":37
 * 
 *     property Nm:
 *         def __set__(self,  Nm):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().Nm = (<int>Nm)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_2Nm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Nm); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_2Nm_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Nm) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_2Nm___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((PyObject *)__pyx_v_Nm));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_2Nm___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_Nm) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":39
 *         def __set__(self,  Nm):
 * 
 *             self.inst.get().Nm = (<int>Nm)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_Nm); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 39, __pyx_L1_error)
  __pyx_v_self->inst.get()->Nm = ((int)__pyx_t_1);

  /* "py_goicp.pyx":37
 * 
 *     property Nm:
 *         def __set__(self,  Nm):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().Nm = (<int>Nm)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.Nm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":42
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().Nm
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_2Nm_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_2Nm_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_2Nm_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_2Nm_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":43
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().Nm             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->Nm;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":44
 *         def __get__(self):
 *             cdef int _r = self.inst.get().Nm
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_goicp.pyx":45
 *             cdef int _r = self.inst.get().Nm
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property Nd:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_goicp.pyx":42
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().Nm
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.Nm.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":48
 * 
 *     property Nd:
 *         def __set__(self,  Nd):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().Nd = (<int>Nd)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_2Nd_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Nd); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_2Nd_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Nd) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_2Nd___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((PyObject *)__pyx_v_Nd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_2Nd___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_Nd) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":50
 *         def __set__(self,  Nd):
 * 
 *             self.inst.get().Nd = (<int>Nd)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_Nd); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 50, __pyx_L1_error)
  __pyx_v_self->inst.get()->Nd = ((int)__pyx_t_1);

  /* "py_goicp.pyx":48
 * 
 *     property Nd:
 *         def __set__(self,  Nd):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().Nd = (<int>Nd)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.Nd.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":53
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().Nd
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_2Nd_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_2Nd_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_2Nd_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_2Nd_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":54
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().Nd             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->Nd;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":55
 *         def __get__(self):
 *             cdef int _r = self.inst.get().Nd
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_goicp.pyx":56
 *             cdef int _r = self.inst.get().Nd
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property MSEThresh:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_goicp.pyx":53
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().Nd
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.Nd.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":59
 * 
 *     property MSEThresh:
 *         def __set__(self, float MSEThresh):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().MSEThresh = (<float>MSEThresh)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_9MSEThresh_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_MSEThresh); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_9MSEThresh_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_MSEThresh) {
  float __pyx_v_MSEThresh;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_MSEThresh); {
    __pyx_v_MSEThresh = __pyx_PyFloat_AsFloat(__pyx_arg_MSEThresh); if (unlikely((__pyx_v_MSEThresh == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 59, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.MSEThresh.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9MSEThresh___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((float)__pyx_v_MSEThresh));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_9MSEThresh___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_MSEThresh) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":61
 *         def __set__(self, float MSEThresh):
 * 
 *             self.inst.get().MSEThresh = (<float>MSEThresh)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->MSEThresh = ((float)__pyx_v_MSEThresh);

  /* "py_goicp.pyx":59
 * 
 *     property MSEThresh:
 *         def __set__(self, float MSEThresh):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().MSEThresh = (<float>MSEThresh)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":64
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().MSEThresh
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_9MSEThresh_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_9MSEThresh_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9MSEThresh_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_9MSEThresh_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":65
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().MSEThresh             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->MSEThresh;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":66
 *         def __get__(self):
 *             cdef float _r = self.inst.get().MSEThresh
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":67
 *             cdef float _r = self.inst.get().MSEThresh
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property SSEThresh:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":64
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().MSEThresh
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.MSEThresh.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":70
 * 
 *     property SSEThresh:
 *         def __set__(self, float SSEThresh):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().SSEThresh = (<float>SSEThresh)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_9SSEThresh_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_SSEThresh); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_9SSEThresh_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_SSEThresh) {
  float __pyx_v_SSEThresh;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_SSEThresh); {
    __pyx_v_SSEThresh = __pyx_PyFloat_AsFloat(__pyx_arg_SSEThresh); if (unlikely((__pyx_v_SSEThresh == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 70, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.SSEThresh.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9SSEThresh___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((float)__pyx_v_SSEThresh));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_9SSEThresh___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_SSEThresh) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":72
 *         def __set__(self, float SSEThresh):
 * 
 *             self.inst.get().SSEThresh = (<float>SSEThresh)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->SSEThresh = ((float)__pyx_v_SSEThresh);

  /* "py_goicp.pyx":70
 * 
 *     property SSEThresh:
 *         def __set__(self, float SSEThresh):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().SSEThresh = (<float>SSEThresh)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":75
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().SSEThresh
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_9SSEThresh_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_9SSEThresh_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9SSEThresh_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_9SSEThresh_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":76
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().SSEThresh             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->SSEThresh;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":77
 *         def __get__(self):
 *             cdef float _r = self.inst.get().SSEThresh
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":78
 *             cdef float _r = self.inst.get().SSEThresh
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property icpThresh:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":75
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().SSEThresh
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.SSEThresh.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":81
 * 
 *     property icpThresh:
 *         def __set__(self, float icpThresh):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().icpThresh = (<float>icpThresh)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_9icpThresh_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_icpThresh); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_9icpThresh_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_icpThresh) {
  float __pyx_v_icpThresh;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_icpThresh); {
    __pyx_v_icpThresh = __pyx_PyFloat_AsFloat(__pyx_arg_icpThresh); if (unlikely((__pyx_v_icpThresh == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 81, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.icpThresh.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9icpThresh___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((float)__pyx_v_icpThresh));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_9icpThresh___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_icpThresh) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":83
 *         def __set__(self, float icpThresh):
 * 
 *             self.inst.get().icpThresh = (<float>icpThresh)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->icpThresh = ((float)__pyx_v_icpThresh);

  /* "py_goicp.pyx":81
 * 
 *     property icpThresh:
 *         def __set__(self, float icpThresh):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().icpThresh = (<float>icpThresh)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":86
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().icpThresh
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_9icpThresh_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_9icpThresh_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9icpThresh_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_9icpThresh_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":87
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().icpThresh             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->icpThresh;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":88
 *         def __get__(self):
 *             cdef float _r = self.inst.get().icpThresh
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":89
 *             cdef float _r = self.inst.get().icpThresh
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property trimFraction:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":86
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().icpThresh
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.icpThresh.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":92
 * 
 *     property trimFraction:
 *         def __set__(self, float trimFraction):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().trimFraction = (<float>trimFraction)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_12trimFraction_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_trimFraction); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_12trimFraction_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_trimFraction) {
  float __pyx_v_trimFraction;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_trimFraction); {
    __pyx_v_trimFraction = __pyx_PyFloat_AsFloat(__pyx_arg_trimFraction); if (unlikely((__pyx_v_trimFraction == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 92, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.trimFraction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_12trimFraction___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((float)__pyx_v_trimFraction));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_12trimFraction___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_trimFraction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":94
 *         def __set__(self, float trimFraction):
 * 
 *             self.inst.get().trimFraction = (<float>trimFraction)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->trimFraction = ((float)__pyx_v_trimFraction);

  /* "py_goicp.pyx":92
 * 
 *     property trimFraction:
 *         def __set__(self, float trimFraction):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().trimFraction = (<float>trimFraction)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":97
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().trimFraction
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_12trimFraction_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_12trimFraction_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_12trimFraction_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_12trimFraction_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":98
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().trimFraction             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->trimFraction;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":99
 *         def __get__(self):
 *             cdef float _r = self.inst.get().trimFraction
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":100
 *             cdef float _r = self.inst.get().trimFraction
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property timeLimit:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":97
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().trimFraction
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.trimFraction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":103
 * 
 *     property timeLimit:
 *         def __set__(self, float timeLimit):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().timeLimit = (<float>timeLimit)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_9timeLimit_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_timeLimit); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_9timeLimit_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_timeLimit) {
  float __pyx_v_timeLimit;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_timeLimit); {
    __pyx_v_timeLimit = __pyx_PyFloat_AsFloat(__pyx_arg_timeLimit); if (unlikely((__pyx_v_timeLimit == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 103, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.timeLimit.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9timeLimit___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((float)__pyx_v_timeLimit));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_9timeLimit___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, float __pyx_v_timeLimit) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":105
 *         def __set__(self, float timeLimit):
 * 
 *             self.inst.get().timeLimit = (<float>timeLimit)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->timeLimit = ((float)__pyx_v_timeLimit);

  /* "py_goicp.pyx":103
 * 
 *     property timeLimit:
 *         def __set__(self, float timeLimit):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().timeLimit = (<float>timeLimit)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":108
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().timeLimit
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_9timeLimit_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_9timeLimit_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9timeLimit_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_9timeLimit_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":109
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().timeLimit             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->timeLimit;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":110
 *         def __get__(self):
 *             cdef float _r = self.inst.get().timeLimit
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":111
 *             cdef float _r = self.inst.get().timeLimit
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property inlierNum:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":108
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().timeLimit
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.timeLimit.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":114
 * 
 *     property inlierNum:
 *         def __set__(self,  inlierNum):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().inlierNum = (<int>inlierNum)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_9inlierNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_inlierNum); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_9inlierNum_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_inlierNum) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9inlierNum___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((PyObject *)__pyx_v_inlierNum));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_9inlierNum___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_inlierNum) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":116
 *         def __set__(self,  inlierNum):
 * 
 *             self.inst.get().inlierNum = (<int>inlierNum)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_inlierNum); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 116, __pyx_L1_error)
  __pyx_v_self->inst.get()->inlierNum = ((int)__pyx_t_1);

  /* "py_goicp.pyx":114
 * 
 *     property inlierNum:
 *         def __set__(self,  inlierNum):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().inlierNum = (<int>inlierNum)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.inlierNum.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":119
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().inlierNum
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_9inlierNum_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_9inlierNum_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_9inlierNum_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_9inlierNum_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":120
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().inlierNum             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->inlierNum;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":121
 *         def __get__(self):
 *             cdef int _r = self.inst.get().inlierNum
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_goicp.pyx":122
 *             cdef int _r = self.inst.get().inlierNum
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property doTrim:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_goicp.pyx":119
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().inlierNum
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.inlierNum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":125
 * 
 *     property doTrim:
 *         def __set__(self,  doTrim):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().doTrim = (<bool>doTrim)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_6doTrim_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_doTrim); /*proto*/
static int __pyx_pw_8py_goicp_5GoICP_6doTrim_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_doTrim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_6doTrim___set__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((PyObject *)__pyx_v_doTrim));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_6doTrim___set__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_doTrim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":127
 *         def __set__(self,  doTrim):
 * 
 *             self.inst.get().doTrim = (<bool>doTrim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_doTrim); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 127, __pyx_L1_error)
  __pyx_v_self->inst.get()->doTrim = ((bool)__pyx_t_1);

  /* "py_goicp.pyx":125
 * 
 *     property doTrim:
 *         def __set__(self,  doTrim):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().doTrim = (<bool>doTrim)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.doTrim.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":130
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bool _r = self.inst.get().doTrim
 *             py_result = <bool>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_6doTrim_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_6doTrim_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_6doTrim_2__get__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_6doTrim_2__get__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":131
 * 
 *         def __get__(self):
 *             cdef bool _r = self.inst.get().doTrim             # <<<<<<<<<<<<<<
 *             py_result = <bool>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->doTrim;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":132
 *         def __get__(self):
 *             cdef bool _r = self.inst.get().doTrim
 *             py_result = <bool>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "py_goicp.pyx":133
 *             cdef bool _r = self.inst.get().doTrim
 *             py_result = <bool>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_goicp.pyx":130
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bool _r = self.inst.get().doTrim
 *             py_result = <bool>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.doTrim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":135
 *             return py_result
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void GoICP()"""
 *         self.inst = shared_ptr[_GoICP](new _GoICP())
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_5GoICP_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_2__init__[] = "Cython signature: void GoICP()";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8py_goicp_5GoICP_2__init__;
#endif
static int __pyx_pw_8py_goicp_5GoICP_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_2__init__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_5GoICP_2__init__(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_goicp.pyx":137
 *     def __init__(self):
 *         """Cython signature: void GoICP()"""
 *         self.inst = shared_ptr[_GoICP](new _GoICP())             # <<<<<<<<<<<<<<
 * 
 *     def Register(self):
 */
  __pyx_v_self->inst = boost::shared_ptr<GoICP> (new GoICP());

  /* "py_goicp.pyx":135
 *             return py_result
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void GoICP()"""
 *         self.inst = shared_ptr[_GoICP](new _GoICP())
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":139
 *         self.inst = shared_ptr[_GoICP](new _GoICP())
 * 
 *     def Register(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: float Register()"""
 *         cdef float _r = self.inst.get().Register()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_5Register(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_4Register[] = "Cython signature: float Register()";
static PyObject *__pyx_pw_8py_goicp_5GoICP_5Register(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Register (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_4Register(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_4Register(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("Register", 0);

  /* "py_goicp.pyx":141
 *     def Register(self):
 *         """Cython signature: float Register()"""
 *         cdef float _r = self.inst.get().Register()             # <<<<<<<<<<<<<<
 *         py_result = <float>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->Register();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 141, __pyx_L1_error)
  }
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":142
 *         """Cython signature: float Register()"""
 *         cdef float _r = self.inst.get().Register()
 *         py_result = <float>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":143
 *         cdef float _r = self.inst.get().Register()
 *         py_result = <float>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def BuildDT(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":139
 *         self.inst = shared_ptr[_GoICP](new _GoICP())
 * 
 *     def Register(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: float Register()"""
 *         cdef float _r = self.inst.get().Register()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.Register", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":145
 *         return py_result
 * 
 *     def BuildDT(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void BuildDT()"""
 *         self.inst.get().BuildDT()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_7BuildDT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_6BuildDT[] = "Cython signature: void BuildDT()";
static PyObject *__pyx_pw_8py_goicp_5GoICP_7BuildDT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("BuildDT (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_6BuildDT(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_6BuildDT(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("BuildDT", 0);

  /* "py_goicp.pyx":147
 *     def BuildDT(self):
 *         """Cython signature: void BuildDT()"""
 *         self.inst.get().BuildDT()             # <<<<<<<<<<<<<<
 * 
 *     def optimalRotation(self):
 */
  try {
    __pyx_v_self->inst.get()->BuildDT();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 147, __pyx_L1_error)
  }

  /* "py_goicp.pyx":145
 *         return py_result
 * 
 *     def BuildDT(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void BuildDT()"""
 *         self.inst.get().BuildDT()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.BuildDT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":149
 *         self.inst.get().BuildDT()
 * 
 *     def optimalRotation(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[libcpp_vector[double]] optimalRotation()"""
 *         _r = self.inst.get().optimalRotation()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_9optimalRotation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_8optimalRotation[] = "Cython signature: libcpp_vector[libcpp_vector[double]] optimalRotation()";
static PyObject *__pyx_pw_8py_goicp_5GoICP_9optimalRotation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimalRotation (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_8optimalRotation(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_8optimalRotation(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("optimalRotation", 0);

  /* "py_goicp.pyx":151
 *     def optimalRotation(self):
 *         """Cython signature: libcpp_vector[libcpp_vector[double]] optimalRotation()"""
 *         _r = self.inst.get().optimalRotation()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->optimalRotation();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 151, __pyx_L1_error)
  }
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":152
 *         """Cython signature: libcpp_vector[libcpp_vector[double]] optimalRotation()"""
 *         _r = self.inst.get().optimalRotation()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(1, 152, __pyx_L1_error)
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":153
 *         _r = self.inst.get().optimalRotation()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def optimalTranslation(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":149
 *         self.inst.get().BuildDT()
 * 
 *     def optimalRotation(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[libcpp_vector[double]] optimalRotation()"""
 *         _r = self.inst.get().optimalRotation()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.optimalRotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":155
 *         return py_result
 * 
 *     def optimalTranslation(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[double] optimalTranslation()"""
 *         _r = self.inst.get().optimalTranslation()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_11optimalTranslation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_10optimalTranslation[] = "Cython signature: libcpp_vector[double] optimalTranslation()";
static PyObject *__pyx_pw_8py_goicp_5GoICP_11optimalTranslation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimalTranslation (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_10optimalTranslation(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_10optimalTranslation(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  std::vector<double>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("optimalTranslation", 0);

  /* "py_goicp.pyx":157
 *     def optimalTranslation(self):
 *         """Cython signature: libcpp_vector[double] optimalTranslation()"""
 *         _r = self.inst.get().optimalTranslation()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->optimalTranslation();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 157, __pyx_L1_error)
  }
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":158
 *         """Cython signature: libcpp_vector[double] optimalTranslation()"""
 *         _r = self.inst.get().optimalTranslation()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v__r); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(1, 158, __pyx_L1_error)
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":159
 *         _r = self.inst.get().optimalTranslation()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def loadModelAndData(self,  in_0 , list in_1 ,  in_2 , list in_3 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":155
 *         return py_result
 * 
 *     def optimalTranslation(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[double] optimalTranslation()"""
 *         _r = self.inst.get().optimalTranslation()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.GoICP.optimalTranslation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":161
 *         return py_result
 * 
 *     def loadModelAndData(self,  in_0 , list in_1 ,  in_2 , list in_3 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_13loadModelAndData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_12loadModelAndData[] = "Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])";
static PyObject *__pyx_pw_8py_goicp_5GoICP_13loadModelAndData(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  PyObject *__pyx_v_in_1 = 0;
  PyObject *__pyx_v_in_2 = 0;
  PyObject *__pyx_v_in_3 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadModelAndData (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,&__pyx_n_s_in_2,&__pyx_n_s_in_3,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadModelAndData", 1, 4, 4, 1); __PYX_ERR(1, 161, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadModelAndData", 1, 4, 4, 2); __PYX_ERR(1, 161, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadModelAndData", 1, 4, 4, 3); __PYX_ERR(1, 161, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "loadModelAndData") < 0)) __PYX_ERR(1, 161, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_in_0 = values[0];
    __pyx_v_in_1 = ((PyObject*)values[1]);
    __pyx_v_in_2 = values[2];
    __pyx_v_in_3 = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadModelAndData", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 161, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.loadModelAndData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_1), (&PyList_Type), 1, "in_1", 1))) __PYX_ERR(1, 161, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_3), (&PyList_Type), 1, "in_3", 1))) __PYX_ERR(1, 161, __pyx_L1_error)
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_12loadModelAndData(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1, __pyx_v_in_2, __pyx_v_in_3);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8py_goicp_5GoICP_16loadModelAndData_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_goicp.pyx":164
 *         """Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 *         assert isinstance(in_3, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_3), 'arg in_3 wrong type'
 */

static PyObject *__pyx_pf_8py_goicp_5GoICP_16loadModelAndData_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *)__pyx_tp_new_8py_goicp___pyx_scope_struct_1_genexpr(__pyx_ptype_8py_goicp___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 164, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8py_goicp_5GoICP_16loadModelAndData_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_loadModelAndData_locals_genexpr, __pyx_n_s_py_goicp); if (unlikely(!gen)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.loadModelAndData.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8py_goicp_5GoICP_16loadModelAndData_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 164, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_1)) { __Pyx_RaiseClosureNameError("in_1"); __PYX_ERR(1, 164, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 164, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_1; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 164, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_8py_goicp_POINT3D); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8py_goicp_5GoICP_16loadModelAndData_5generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_goicp.pyx":166
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 *         assert isinstance(in_3, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_3), 'arg in_3 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_POINT3D] * v1 = new libcpp_vector[_POINT3D]()
 */

static PyObject *__pyx_pf_8py_goicp_5GoICP_16loadModelAndData_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *)__pyx_tp_new_8py_goicp___pyx_scope_struct_2_genexpr(__pyx_ptype_8py_goicp___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 166, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8py_goicp_5GoICP_16loadModelAndData_5generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_loadModelAndData_locals_genexpr, __pyx_n_s_py_goicp); if (unlikely(!gen)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.loadModelAndData.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8py_goicp_5GoICP_16loadModelAndData_5generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 166, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_3)) { __Pyx_RaiseClosureNameError("in_3"); __PYX_ERR(1, 166, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 166, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 166, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_8py_goicp_POINT3D); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":161
 *         return py_result
 * 
 *     def loadModelAndData(self,  in_0 , list in_1 ,  in_2 , list in_3 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_8py_goicp_5GoICP_12loadModelAndData(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1, PyObject *__pyx_v_in_2, PyObject *__pyx_v_in_3) {
  struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *__pyx_cur_scope;
  std::vector<POINT3D>  *__pyx_v_v1;
  struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_item1 = 0;
  std::vector<POINT3D>  *__pyx_v_v3;
  struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_item3 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<POINT3D>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("loadModelAndData", 0);
  __pyx_cur_scope = (struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *)__pyx_tp_new_8py_goicp___pyx_scope_struct__loadModelAndData(__pyx_ptype_8py_goicp___pyx_scope_struct__loadModelAndData, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 161, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_1 = __pyx_v_in_1;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_1);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_1);
  __pyx_cur_scope->__pyx_v_in_3 = __pyx_v_in_3;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_3);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_3);

  /* "py_goicp.pyx":163
 *     def loadModelAndData(self,  in_0 , list in_1 ,  in_2 , list in_3 ):
 *         """Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 163, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":164
 *         """Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 *         assert isinstance(in_3, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_3), 'arg in_3 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_in_1;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_8py_goicp_5GoICP_16loadModelAndData_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      __PYX_ERR(1, 164, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":165
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_3, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_3), 'arg in_3 wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = PyInt_Check(__pyx_v_in_2); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_2 = PyLong_Check(__pyx_v_in_2); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L7_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_2_wrong_type);
      __PYX_ERR(1, 165, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":166
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 *         assert isinstance(in_3, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_3), 'arg in_3 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_POINT3D] * v1 = new libcpp_vector[_POINT3D]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_3;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = PyList_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_8py_goicp_5GoICP_16loadModelAndData_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_3_wrong_type);
      __PYX_ERR(1, 166, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":168
 *         assert isinstance(in_3, list) and all(isinstance(elemt_rec, POINT3D) for elemt_rec in in_3), 'arg in_3 wrong type'
 * 
 *         cdef libcpp_vector[_POINT3D] * v1 = new libcpp_vector[_POINT3D]()             # <<<<<<<<<<<<<<
 *         cdef POINT3D item1
 *         for item1 in in_1:
 */
  try {
    __pyx_t_6 = new std::vector<POINT3D> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 168, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_6;

  /* "py_goicp.pyx":170
 *         cdef libcpp_vector[_POINT3D] * v1 = new libcpp_vector[_POINT3D]()
 *         cdef POINT3D item1
 *         for item1 in in_1:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 170, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_cur_scope->__pyx_v_in_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 170, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_8py_goicp_POINT3D))))) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item1, ((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "py_goicp.pyx":171
 *         cdef POINT3D item1
 *         for item1 in in_1:
 *             v1.push_back(deref(item1.inst.get()))             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_POINT3D] * v3 = new libcpp_vector[_POINT3D]()
 */
    try {
      __pyx_v_v1->push_back((*__pyx_v_item1->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 171, __pyx_L1_error)
    }

    /* "py_goicp.pyx":170
 *         cdef libcpp_vector[_POINT3D] * v1 = new libcpp_vector[_POINT3D]()
 *         cdef POINT3D item1
 *         for item1 in in_1:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "py_goicp.pyx":173
 *             v1.push_back(deref(item1.inst.get()))
 * 
 *         cdef libcpp_vector[_POINT3D] * v3 = new libcpp_vector[_POINT3D]()             # <<<<<<<<<<<<<<
 *         cdef POINT3D item3
 *         for item3 in in_3:
 */
  try {
    __pyx_t_6 = new std::vector<POINT3D> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 173, __pyx_L1_error)
  }
  __pyx_v_v3 = __pyx_t_6;

  /* "py_goicp.pyx":175
 *         cdef libcpp_vector[_POINT3D] * v3 = new libcpp_vector[_POINT3D]()
 *         cdef POINT3D item3
 *         for item3 in in_3:             # <<<<<<<<<<<<<<
 *             v3.push_back(deref(item3.inst.get()))
 *         self.inst.get().loadModelAndData((<int>in_0), deref(v1), (<int>in_2), deref(v3))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 175, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_cur_scope->__pyx_v_in_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 175, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_8py_goicp_POINT3D))))) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item3, ((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "py_goicp.pyx":176
 *         cdef POINT3D item3
 *         for item3 in in_3:
 *             v3.push_back(deref(item3.inst.get()))             # <<<<<<<<<<<<<<
 *         self.inst.get().loadModelAndData((<int>in_0), deref(v1), (<int>in_2), deref(v3))
 *         del v3
 */
    try {
      __pyx_v_v3->push_back((*__pyx_v_item3->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 176, __pyx_L1_error)
    }

    /* "py_goicp.pyx":175
 *         cdef libcpp_vector[_POINT3D] * v3 = new libcpp_vector[_POINT3D]()
 *         cdef POINT3D item3
 *         for item3 in in_3:             # <<<<<<<<<<<<<<
 *             v3.push_back(deref(item3.inst.get()))
 *         self.inst.get().loadModelAndData((<int>in_0), deref(v1), (<int>in_2), deref(v3))
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "py_goicp.pyx":177
 *         for item3 in in_3:
 *             v3.push_back(deref(item3.inst.get()))
 *         self.inst.get().loadModelAndData((<int>in_0), deref(v1), (<int>in_2), deref(v3))             # <<<<<<<<<<<<<<
 *         del v3
 *         del v1
 */
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 177, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_in_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 177, __pyx_L1_error)
  try {
    __pyx_v_self->inst.get()->loadModelAndData(((int)__pyx_t_8), (*__pyx_v_v1), ((int)__pyx_t_9), (*__pyx_v_v3));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 177, __pyx_L1_error)
  }

  /* "py_goicp.pyx":178
 *             v3.push_back(deref(item3.inst.get()))
 *         self.inst.get().loadModelAndData((<int>in_0), deref(v1), (<int>in_2), deref(v3))
 *         del v3             # <<<<<<<<<<<<<<
 *         del v1
 * 
 */
  delete __pyx_v_v3;

  /* "py_goicp.pyx":179
 *         self.inst.get().loadModelAndData((<int>in_0), deref(v1), (<int>in_2), deref(v3))
 *         del v3
 *         del v1             # <<<<<<<<<<<<<<
 * 
 *     def setInitNodeRot(self, ROTNODE in_0 ):
 */
  delete __pyx_v_v1;

  /* "py_goicp.pyx":161
 *         return py_result
 * 
 *     def loadModelAndData(self,  in_0 , list in_1 ,  in_2 , list in_3 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void loadModelAndData(int, libcpp_vector[POINT3D], int, libcpp_vector[POINT3D])"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_goicp.GoICP.loadModelAndData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item1);
  __Pyx_XDECREF((PyObject *)__pyx_v_item3);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":181
 *         del v1
 * 
 *     def setInitNodeRot(self, ROTNODE in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void setInitNodeRot(ROTNODE &)"""
 *         assert isinstance(in_0, ROTNODE), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_15setInitNodeRot(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_14setInitNodeRot[] = "Cython signature: void setInitNodeRot(ROTNODE &)";
static PyObject *__pyx_pw_8py_goicp_5GoICP_15setInitNodeRot(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setInitNodeRot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), __pyx_ptype_8py_goicp_ROTNODE, 1, "in_0", 0))) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_14setInitNodeRot(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_14setInitNodeRot(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_in_0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setInitNodeRot", 0);

  /* "py_goicp.pyx":183
 *     def setInitNodeRot(self, ROTNODE in_0 ):
 *         """Cython signature: void setInitNodeRot(ROTNODE &)"""
 *         assert isinstance(in_0, ROTNODE), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().setInitNodeRot((deref(in_0.inst.get())))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_0), __pyx_ptype_8py_goicp_ROTNODE); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 183, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":185
 *         assert isinstance(in_0, ROTNODE), 'arg in_0 wrong type'
 * 
 *         self.inst.get().setInitNodeRot((deref(in_0.inst.get())))             # <<<<<<<<<<<<<<
 * 
 *     def setInitNodeTrans(self, TRANSNODE in_0 ):
 */
  try {
    __pyx_v_self->inst.get()->setInitNodeRot((*__pyx_v_in_0->inst.get()));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 185, __pyx_L1_error)
  }

  /* "py_goicp.pyx":181
 *         del v1
 * 
 *     def setInitNodeRot(self, ROTNODE in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void setInitNodeRot(ROTNODE &)"""
 *         assert isinstance(in_0, ROTNODE), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.setInitNodeRot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":187
 *         self.inst.get().setInitNodeRot((deref(in_0.inst.get())))
 * 
 *     def setInitNodeTrans(self, TRANSNODE in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void setInitNodeTrans(TRANSNODE &)"""
 *         assert isinstance(in_0, TRANSNODE), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_17setInitNodeTrans(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_16setInitNodeTrans[] = "Cython signature: void setInitNodeTrans(TRANSNODE &)";
static PyObject *__pyx_pw_8py_goicp_5GoICP_17setInitNodeTrans(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setInitNodeTrans (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), __pyx_ptype_8py_goicp_TRANSNODE, 1, "in_0", 0))) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_16setInitNodeTrans(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_16setInitNodeTrans(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_in_0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setInitNodeTrans", 0);

  /* "py_goicp.pyx":189
 *     def setInitNodeTrans(self, TRANSNODE in_0 ):
 *         """Cython signature: void setInitNodeTrans(TRANSNODE &)"""
 *         assert isinstance(in_0, TRANSNODE), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().setInitNodeTrans((deref(in_0.inst.get())))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_0), __pyx_ptype_8py_goicp_TRANSNODE); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 189, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":191
 *         assert isinstance(in_0, TRANSNODE), 'arg in_0 wrong type'
 * 
 *         self.inst.get().setInitNodeTrans((deref(in_0.inst.get())))             # <<<<<<<<<<<<<<
 * 
 *     def setDTSizeAndFactor(self,  in_0 , double in_1 ):
 */
  try {
    __pyx_v_self->inst.get()->setInitNodeTrans((*__pyx_v_in_0->inst.get()));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 191, __pyx_L1_error)
  }

  /* "py_goicp.pyx":187
 *         self.inst.get().setInitNodeRot((deref(in_0.inst.get())))
 * 
 *     def setInitNodeTrans(self, TRANSNODE in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void setInitNodeTrans(TRANSNODE &)"""
 *         assert isinstance(in_0, TRANSNODE), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.setInitNodeTrans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":193
 *         self.inst.get().setInitNodeTrans((deref(in_0.inst.get())))
 * 
 *     def setDTSizeAndFactor(self,  in_0 , double in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void setDTSizeAndFactor(int, double)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_19setDTSizeAndFactor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8py_goicp_5GoICP_18setDTSizeAndFactor[] = "Cython signature: void setDTSizeAndFactor(int, double)";
static PyObject *__pyx_pw_8py_goicp_5GoICP_19setDTSizeAndFactor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  double __pyx_v_in_1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDTSizeAndFactor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDTSizeAndFactor", 1, 2, 2, 1); __PYX_ERR(1, 193, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDTSizeAndFactor") < 0)) __PYX_ERR(1, 193, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_0 = values[0];
    __pyx_v_in_1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_in_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 193, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDTSizeAndFactor", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 193, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.GoICP.setDTSizeAndFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_18setDTSizeAndFactor(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_18setDTSizeAndFactor(struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, PyObject *__pyx_v_in_0, double __pyx_v_in_1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("setDTSizeAndFactor", 0);

  /* "py_goicp.pyx":195
 *     def setDTSizeAndFactor(self,  in_0 , double in_1 ):
 *         """Cython signature: void setDTSizeAndFactor(int, double)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 195, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":196
 *         """Cython signature: void setDTSizeAndFactor(int, double)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_in_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyFloat_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      __PYX_ERR(1, 196, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":199
 * 
 * 
 *         self.inst.get().setDTSizeAndFactor((<int>in_0), (<double>in_1))             # <<<<<<<<<<<<<<
 * 
 * cdef class POINT3D:
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 199, __pyx_L1_error)
  try {
    __pyx_v_self->inst.get()->setDTSizeAndFactor(((int)__pyx_t_5), ((double)__pyx_v_in_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 199, __pyx_L1_error)
  }

  /* "py_goicp.pyx":193
 *         self.inst.get().setInitNodeTrans((deref(in_0.inst.get())))
 * 
 *     def setDTSizeAndFactor(self,  in_0 , double in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void setDTSizeAndFactor(int, double)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("py_goicp.GoICP.setDTSizeAndFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_20__reduce_cython__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.GoICP.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_5GoICP_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8py_goicp_5GoICP_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_5GoICP_22__setstate_cython__(((struct __pyx_obj_8py_goicp_GoICP *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_5GoICP_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_GoICP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.GoICP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":208
 *     cdef shared_ptr[_POINT3D] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_8py_goicp_7POINT3D_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8py_goicp_7POINT3D_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8py_goicp_7POINT3D___dealloc__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8py_goicp_7POINT3D___dealloc__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "py_goicp.pyx":209
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "py_goicp.pyx":208
 *     cdef shared_ptr[_POINT3D] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_goicp.pyx":213
 * 
 *     property x:
 *         def __set__(self, float x):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().x = (<float>x)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7POINT3D_1x_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static int __pyx_pw_8py_goicp_7POINT3D_1x_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  float __pyx_v_x;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsFloat(__pyx_arg_x); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 213, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.POINT3D.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_1x___set__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self), ((float)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7POINT3D_1x___set__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, float __pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":215
 *         def __set__(self, float x):
 * 
 *             self.inst.get().x = (<float>x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->x = ((float)__pyx_v_x);

  /* "py_goicp.pyx":213
 * 
 *     property x:
 *         def __set__(self, float x):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().x = (<float>x)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":218
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().x
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7POINT3D_1x_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7POINT3D_1x_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_1x_2__get__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7POINT3D_1x_2__get__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":219
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().x             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->x;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":220
 *         def __get__(self):
 *             cdef float _r = self.inst.get().x
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":221
 *             cdef float _r = self.inst.get().x
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property y:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":218
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().x
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.POINT3D.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":224
 * 
 *     property y:
 *         def __set__(self, float y):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().y = (<float>y)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7POINT3D_1y_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_y); /*proto*/
static int __pyx_pw_8py_goicp_7POINT3D_1y_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_y) {
  float __pyx_v_y;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_y); {
    __pyx_v_y = __pyx_PyFloat_AsFloat(__pyx_arg_y); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 224, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.POINT3D.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_1y___set__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self), ((float)__pyx_v_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7POINT3D_1y___set__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, float __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":226
 *         def __set__(self, float y):
 * 
 *             self.inst.get().y = (<float>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->y = ((float)__pyx_v_y);

  /* "py_goicp.pyx":224
 * 
 *     property y:
 *         def __set__(self, float y):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().y = (<float>y)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":229
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().y
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7POINT3D_1y_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7POINT3D_1y_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_1y_2__get__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7POINT3D_1y_2__get__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":230
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().y             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->y;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":231
 *         def __get__(self):
 *             cdef float _r = self.inst.get().y
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":232
 *             cdef float _r = self.inst.get().y
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property z:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":229
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().y
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.POINT3D.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":235
 * 
 *     property z:
 *         def __set__(self, float z):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().z = (<float>z)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7POINT3D_1z_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_z); /*proto*/
static int __pyx_pw_8py_goicp_7POINT3D_1z_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_z) {
  float __pyx_v_z;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_z); {
    __pyx_v_z = __pyx_PyFloat_AsFloat(__pyx_arg_z); if (unlikely((__pyx_v_z == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 235, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.POINT3D.z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_1z___set__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self), ((float)__pyx_v_z));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7POINT3D_1z___set__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, float __pyx_v_z) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":237
 *         def __set__(self, float z):
 * 
 *             self.inst.get().z = (<float>z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->z = ((float)__pyx_v_z);

  /* "py_goicp.pyx":235
 * 
 *     property z:
 *         def __set__(self, float z):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().z = (<float>z)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":240
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().z
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7POINT3D_1z_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7POINT3D_1z_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_1z_2__get__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7POINT3D_1z_2__get__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":241
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().z             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->z;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":242
 *         def __get__(self):
 *             cdef float _r = self.inst.get().z
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":243
 *             cdef float _r = self.inst.get().z
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _init_0(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":240
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().z
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.POINT3D.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":245
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void POINT3D()"""
 *         self.inst = shared_ptr[_POINT3D](new _POINT3D())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7POINT3D_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8py_goicp_7POINT3D_2_init_0[] = "Cython signature: void POINT3D()";
static PyObject *__pyx_pw_8py_goicp_7POINT3D_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_2_init_0(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7POINT3D_2_init_0(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "py_goicp.pyx":247
 *     def _init_0(self):
 *         """Cython signature: void POINT3D()"""
 *         self.inst = shared_ptr[_POINT3D](new _POINT3D())             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self, float in_0 , float in_1 , float in_2 ):
 */
  __pyx_v_self->inst = boost::shared_ptr<POINT3D> (new POINT3D());

  /* "py_goicp.pyx":245
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void POINT3D()"""
 *         self.inst = shared_ptr[_POINT3D](new _POINT3D())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":249
 *         self.inst = shared_ptr[_POINT3D](new _POINT3D())
 * 
 *     def _init_1(self, float in_0 , float in_1 , float in_2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void POINT3D(float, float, float)"""
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7POINT3D_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8py_goicp_7POINT3D_4_init_1[] = "Cython signature: void POINT3D(float, float, float)";
static PyObject *__pyx_pw_8py_goicp_7POINT3D_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_in_0;
  float __pyx_v_in_1;
  float __pyx_v_in_2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,&__pyx_n_s_in_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_1", 1, 3, 3, 1); __PYX_ERR(1, 249, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_1", 1, 3, 3, 2); __PYX_ERR(1, 249, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_1") < 0)) __PYX_ERR(1, 249, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_in_0 = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_in_0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 249, __pyx_L3_error)
    __pyx_v_in_1 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_in_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 249, __pyx_L3_error)
    __pyx_v_in_2 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_in_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 249, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 249, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.POINT3D._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_4_init_1(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1, __pyx_v_in_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7POINT3D_4_init_1(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, float __pyx_v_in_0, float __pyx_v_in_1, float __pyx_v_in_2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "py_goicp.pyx":251
 *     def _init_1(self, float in_0 , float in_1 , float in_2 ):
 *         """Cython signature: void POINT3D(float, float, float)"""
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 251, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":252
 *         """Cython signature: void POINT3D(float, float, float)"""
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      __PYX_ERR(1, 252, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":253
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_2_wrong_type);
      __PYX_ERR(1, 253, __pyx_L1_error)
    }
  }
  #endif

  /* "py_goicp.pyx":257
 * 
 * 
 *         self.inst = shared_ptr[_POINT3D](new _POINT3D((<float>in_0), (<float>in_1), (<float>in_2)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_v_self->inst = boost::shared_ptr<POINT3D> (new POINT3D(((float)__pyx_v_in_0), ((float)__pyx_v_in_1), ((float)__pyx_v_in_2)));

  /* "py_goicp.pyx":249
 *         self.inst = shared_ptr[_POINT3D](new _POINT3D())
 * 
 *     def _init_1(self, float in_0 , float in_1 , float in_2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void POINT3D(float, float, float)"""
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.POINT3D._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":259
 *         self.inst = shared_ptr[_POINT3D](new _POINT3D((<float>in_0), (<float>in_1), (<float>in_2)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void POINT3D()
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7POINT3D_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8py_goicp_7POINT3D_6__init__[] = "\n          - Cython signature: void POINT3D()\n          - Cython signature: void POINT3D(float, float, float)\n";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8py_goicp_7POINT3D_6__init__;
#endif
static int __pyx_pw_8py_goicp_7POINT3D_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_6__init__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7POINT3D_6__init__(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_goicp.pyx":264
 *           - Cython signature: void POINT3D(float, float, float)
 * """
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):
 */
  __pyx_t_1 = (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "py_goicp.pyx":265
 * """
 *         if not args:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):
 *              self._init_1(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "py_goicp.pyx":264
 *           - Cython signature: void POINT3D(float, float, float)
 * """
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):
 */
    goto __pyx_L3;
  }

  /* "py_goicp.pyx":266
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 266, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 == 3) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = PyFloat_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 1);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyFloat_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 2);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = PyFloat_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "py_goicp.pyx":267
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "py_goicp.pyx":266
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "py_goicp.pyx":269
 *              self._init_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def pointToString(self):
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_args);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 269, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "py_goicp.pyx":259
 *         self.inst = shared_ptr[_POINT3D](new _POINT3D((<float>in_0), (<float>in_1), (<float>in_2)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void POINT3D()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("py_goicp.POINT3D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":271
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def pointToString(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void pointToString()"""
 *         self.inst.get().pointToString()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7POINT3D_9pointToString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8py_goicp_7POINT3D_8pointToString[] = "Cython signature: void pointToString()";
static PyObject *__pyx_pw_8py_goicp_7POINT3D_9pointToString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pointToString (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_8pointToString(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7POINT3D_8pointToString(struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pointToString", 0);

  /* "py_goicp.pyx":273
 *     def pointToString(self):
 *         """Cython signature: void pointToString()"""
 *         self.inst.get().pointToString()             # <<<<<<<<<<<<<<
 * 
 * cdef class ROTNODE:
 */
  __pyx_v_self->inst.get()->pointToString();

  /* "py_goicp.pyx":271
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def pointToString(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void pointToString()"""
 *         self.inst.get().pointToString()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7POINT3D_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7POINT3D_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_10__reduce_cython__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7POINT3D_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.POINT3D.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7POINT3D_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7POINT3D_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7POINT3D_12__setstate_cython__(((struct __pyx_obj_8py_goicp_POINT3D *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7POINT3D_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_POINT3D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.POINT3D.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":282
 *     cdef shared_ptr[_ROTNODE] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_8py_goicp_7ROTNODE_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8py_goicp_7ROTNODE_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8py_goicp_7ROTNODE___dealloc__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8py_goicp_7ROTNODE___dealloc__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "py_goicp.pyx":283
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "py_goicp.pyx":282
 *     cdef shared_ptr[_ROTNODE] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_goicp.pyx":287
 * 
 *     property a:
 *         def __set__(self, float a):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().a = (<float>a)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7ROTNODE_1a_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static int __pyx_pw_8py_goicp_7ROTNODE_1a_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  float __pyx_v_a;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_PyFloat_AsFloat(__pyx_arg_a); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 287, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.ROTNODE.a.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1a___set__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self), ((float)__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7ROTNODE_1a___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_a) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":289
 *         def __set__(self, float a):
 * 
 *             self.inst.get().a = (<float>a)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->a = ((float)__pyx_v_a);

  /* "py_goicp.pyx":287
 * 
 *     property a:
 *         def __set__(self, float a):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().a = (<float>a)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":292
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().a
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1a_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1a_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1a_2__get__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1a_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":293
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().a             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->a;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":294
 *         def __get__(self):
 *             cdef float _r = self.inst.get().a
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":295
 *             cdef float _r = self.inst.get().a
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property b:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":292
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().a
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.ROTNODE.a.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":298
 * 
 *     property b:
 *         def __set__(self, float b):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().b = (<float>b)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7ROTNODE_1b_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_b); /*proto*/
static int __pyx_pw_8py_goicp_7ROTNODE_1b_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_b) {
  float __pyx_v_b;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_b); {
    __pyx_v_b = __pyx_PyFloat_AsFloat(__pyx_arg_b); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 298, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.ROTNODE.b.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1b___set__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self), ((float)__pyx_v_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7ROTNODE_1b___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_b) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":300
 *         def __set__(self, float b):
 * 
 *             self.inst.get().b = (<float>b)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->b = ((float)__pyx_v_b);

  /* "py_goicp.pyx":298
 * 
 *     property b:
 *         def __set__(self, float b):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().b = (<float>b)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":303
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().b
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1b_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1b_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1b_2__get__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1b_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":304
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().b             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->b;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":305
 *         def __get__(self):
 *             cdef float _r = self.inst.get().b
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":306
 *             cdef float _r = self.inst.get().b
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property c:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":303
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().b
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.ROTNODE.b.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":309
 * 
 *     property c:
 *         def __set__(self, float c):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().c = (<float>c)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7ROTNODE_1c_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_c); /*proto*/
static int __pyx_pw_8py_goicp_7ROTNODE_1c_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_c) {
  float __pyx_v_c;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_c); {
    __pyx_v_c = __pyx_PyFloat_AsFloat(__pyx_arg_c); if (unlikely((__pyx_v_c == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 309, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.ROTNODE.c.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1c___set__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self), ((float)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7ROTNODE_1c___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_c) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":311
 *         def __set__(self, float c):
 * 
 *             self.inst.get().c = (<float>c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->c = ((float)__pyx_v_c);

  /* "py_goicp.pyx":309
 * 
 *     property c:
 *         def __set__(self, float c):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().c = (<float>c)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":314
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().c
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1c_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1c_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1c_2__get__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1c_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":315
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().c             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->c;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":316
 *         def __get__(self):
 *             cdef float _r = self.inst.get().c
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":317
 *             cdef float _r = self.inst.get().c
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property w:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":314
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().c
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.ROTNODE.c.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":320
 * 
 *     property w:
 *         def __set__(self, float w):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().w = (<float>w)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7ROTNODE_1w_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_w); /*proto*/
static int __pyx_pw_8py_goicp_7ROTNODE_1w_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_w) {
  float __pyx_v_w;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_w); {
    __pyx_v_w = __pyx_PyFloat_AsFloat(__pyx_arg_w); if (unlikely((__pyx_v_w == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 320, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.ROTNODE.w.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1w___set__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self), ((float)__pyx_v_w));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7ROTNODE_1w___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_w) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":322
 *         def __set__(self, float w):
 * 
 *             self.inst.get().w = (<float>w)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->w = ((float)__pyx_v_w);

  /* "py_goicp.pyx":320
 * 
 *     property w:
 *         def __set__(self, float w):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().w = (<float>w)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":325
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().w
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1w_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1w_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1w_2__get__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1w_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":326
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().w             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->w;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":327
 *         def __get__(self):
 *             cdef float _r = self.inst.get().w
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":328
 *             cdef float _r = self.inst.get().w
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property ub:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":325
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().w
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.ROTNODE.w.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":331
 * 
 *     property ub:
 *         def __set__(self, float ub):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().ub = (<float>ub)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7ROTNODE_2ub_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_ub); /*proto*/
static int __pyx_pw_8py_goicp_7ROTNODE_2ub_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_ub) {
  float __pyx_v_ub;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_ub); {
    __pyx_v_ub = __pyx_PyFloat_AsFloat(__pyx_arg_ub); if (unlikely((__pyx_v_ub == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 331, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.ROTNODE.ub.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_2ub___set__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self), ((float)__pyx_v_ub));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7ROTNODE_2ub___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_ub) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":333
 *         def __set__(self, float ub):
 * 
 *             self.inst.get().ub = (<float>ub)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->ub = ((float)__pyx_v_ub);

  /* "py_goicp.pyx":331
 * 
 *     property ub:
 *         def __set__(self, float ub):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().ub = (<float>ub)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":336
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().ub
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_2ub_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_2ub_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_2ub_2__get__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_2ub_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":337
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().ub             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->ub;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":338
 *         def __get__(self):
 *             cdef float _r = self.inst.get().ub
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":339
 *             cdef float _r = self.inst.get().ub
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property lb:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":336
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().ub
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.ROTNODE.ub.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":342
 * 
 *     property lb:
 *         def __set__(self, float lb):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().lb = (<float>lb)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7ROTNODE_2lb_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_lb); /*proto*/
static int __pyx_pw_8py_goicp_7ROTNODE_2lb_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_lb) {
  float __pyx_v_lb;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_lb); {
    __pyx_v_lb = __pyx_PyFloat_AsFloat(__pyx_arg_lb); if (unlikely((__pyx_v_lb == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 342, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.ROTNODE.lb.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_2lb___set__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self), ((float)__pyx_v_lb));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7ROTNODE_2lb___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, float __pyx_v_lb) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":344
 *         def __set__(self, float lb):
 * 
 *             self.inst.get().lb = (<float>lb)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->lb = ((float)__pyx_v_lb);

  /* "py_goicp.pyx":342
 * 
 *     property lb:
 *         def __set__(self, float lb):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().lb = (<float>lb)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":347
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().lb
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_2lb_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_2lb_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_2lb_2__get__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_2lb_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":348
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().lb             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->lb;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":349
 *         def __get__(self):
 *             cdef float _r = self.inst.get().lb
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":350
 *             cdef float _r = self.inst.get().lb
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property l:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":347
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().lb
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.ROTNODE.lb.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":353
 * 
 *     property l:
 *         def __set__(self,  l):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().l = (<int>l)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7ROTNODE_1l_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_l); /*proto*/
static int __pyx_pw_8py_goicp_7ROTNODE_1l_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_l) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1l___set__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self), ((PyObject *)__pyx_v_l));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7ROTNODE_1l___set__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, PyObject *__pyx_v_l) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":355
 *         def __set__(self,  l):
 * 
 *             self.inst.get().l = (<int>l)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_l); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 355, __pyx_L1_error)
  __pyx_v_self->inst.get()->l = ((int)__pyx_t_1);

  /* "py_goicp.pyx":353
 * 
 *     property l:
 *         def __set__(self,  l):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().l = (<int>l)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_goicp.ROTNODE.l.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":358
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().l
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1l_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_1l_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_1l_2__get__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_1l_2__get__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":359
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().l             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->l;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":360
 *         def __get__(self):
 *             cdef int _r = self.inst.get().l
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_goicp.pyx":361
 *             cdef int _r = self.inst.get().l
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_goicp.pyx":358
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().l
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.ROTNODE.l.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":363
 *             return py_result
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void ROTNODE()"""
 *         self.inst = shared_ptr[_ROTNODE](new _ROTNODE())
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_7ROTNODE_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8py_goicp_7ROTNODE_2__init__[] = "Cython signature: void ROTNODE()";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8py_goicp_7ROTNODE_2__init__;
#endif
static int __pyx_pw_8py_goicp_7ROTNODE_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_2__init__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_7ROTNODE_2__init__(struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_goicp.pyx":365
 *     def __init__(self):
 *         """Cython signature: void ROTNODE()"""
 *         self.inst = shared_ptr[_ROTNODE](new _ROTNODE())             # <<<<<<<<<<<<<<
 * 
 * cdef class TRANSNODE:
 */
  __pyx_v_self->inst = boost::shared_ptr<ROTNODE> (new ROTNODE());

  /* "py_goicp.pyx":363
 *             return py_result
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void ROTNODE()"""
 *         self.inst = shared_ptr[_ROTNODE](new _ROTNODE())
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_4__reduce_cython__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.ROTNODE.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8py_goicp_7ROTNODE_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_7ROTNODE_6__setstate_cython__(((struct __pyx_obj_8py_goicp_ROTNODE *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_7ROTNODE_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_ROTNODE *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.ROTNODE.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":374
 *     cdef shared_ptr[_TRANSNODE] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_8py_goicp_9TRANSNODE_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8py_goicp_9TRANSNODE_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8py_goicp_9TRANSNODE___dealloc__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8py_goicp_9TRANSNODE___dealloc__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "py_goicp.pyx":375
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "py_goicp.pyx":374
 *     cdef shared_ptr[_TRANSNODE] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_goicp.pyx":379
 * 
 *     property x:
 *         def __set__(self, float x):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().x = (<float>x)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_9TRANSNODE_1x_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static int __pyx_pw_8py_goicp_9TRANSNODE_1x_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  float __pyx_v_x;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsFloat(__pyx_arg_x); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 379, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.TRANSNODE.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_1x___set__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self), ((float)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_9TRANSNODE_1x___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":381
 *         def __set__(self, float x):
 * 
 *             self.inst.get().x = (<float>x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->x = ((float)__pyx_v_x);

  /* "py_goicp.pyx":379
 * 
 *     property x:
 *         def __set__(self, float x):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().x = (<float>x)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":384
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().x
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_1x_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_1x_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_1x_2__get__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_1x_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":385
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().x             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->x;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":386
 *         def __get__(self):
 *             cdef float _r = self.inst.get().x
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":387
 *             cdef float _r = self.inst.get().x
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property y:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":384
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().x
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.TRANSNODE.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":390
 * 
 *     property y:
 *         def __set__(self, float y):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().y = (<float>y)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_9TRANSNODE_1y_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_y); /*proto*/
static int __pyx_pw_8py_goicp_9TRANSNODE_1y_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_y) {
  float __pyx_v_y;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_y); {
    __pyx_v_y = __pyx_PyFloat_AsFloat(__pyx_arg_y); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 390, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.TRANSNODE.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_1y___set__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self), ((float)__pyx_v_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_9TRANSNODE_1y___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":392
 *         def __set__(self, float y):
 * 
 *             self.inst.get().y = (<float>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->y = ((float)__pyx_v_y);

  /* "py_goicp.pyx":390
 * 
 *     property y:
 *         def __set__(self, float y):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().y = (<float>y)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":395
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().y
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_1y_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_1y_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_1y_2__get__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_1y_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":396
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().y             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->y;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":397
 *         def __get__(self):
 *             cdef float _r = self.inst.get().y
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":398
 *             cdef float _r = self.inst.get().y
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property z:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":395
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().y
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.TRANSNODE.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":401
 * 
 *     property z:
 *         def __set__(self, float z):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().z = (<float>z)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_9TRANSNODE_1z_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_z); /*proto*/
static int __pyx_pw_8py_goicp_9TRANSNODE_1z_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_z) {
  float __pyx_v_z;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_z); {
    __pyx_v_z = __pyx_PyFloat_AsFloat(__pyx_arg_z); if (unlikely((__pyx_v_z == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 401, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.TRANSNODE.z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_1z___set__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self), ((float)__pyx_v_z));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_9TRANSNODE_1z___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_z) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":403
 *         def __set__(self, float z):
 * 
 *             self.inst.get().z = (<float>z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->z = ((float)__pyx_v_z);

  /* "py_goicp.pyx":401
 * 
 *     property z:
 *         def __set__(self, float z):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().z = (<float>z)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":406
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().z
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_1z_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_1z_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_1z_2__get__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_1z_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":407
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().z             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->z;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":408
 *         def __get__(self):
 *             cdef float _r = self.inst.get().z
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":409
 *             cdef float _r = self.inst.get().z
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property w:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":406
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().z
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.TRANSNODE.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":412
 * 
 *     property w:
 *         def __set__(self, float w):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().w = (<float>w)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_9TRANSNODE_1w_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_w); /*proto*/
static int __pyx_pw_8py_goicp_9TRANSNODE_1w_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_w) {
  float __pyx_v_w;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_w); {
    __pyx_v_w = __pyx_PyFloat_AsFloat(__pyx_arg_w); if (unlikely((__pyx_v_w == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 412, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.TRANSNODE.w.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_1w___set__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self), ((float)__pyx_v_w));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_9TRANSNODE_1w___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_w) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":414
 *         def __set__(self, float w):
 * 
 *             self.inst.get().w = (<float>w)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->w = ((float)__pyx_v_w);

  /* "py_goicp.pyx":412
 * 
 *     property w:
 *         def __set__(self, float w):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().w = (<float>w)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":417
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().w
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_1w_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_1w_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_1w_2__get__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_1w_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":418
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().w             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->w;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":419
 *         def __get__(self):
 *             cdef float _r = self.inst.get().w
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":420
 *             cdef float _r = self.inst.get().w
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property ub:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":417
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().w
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.TRANSNODE.w.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":423
 * 
 *     property ub:
 *         def __set__(self, float ub):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().ub = (<float>ub)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_9TRANSNODE_2ub_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_ub); /*proto*/
static int __pyx_pw_8py_goicp_9TRANSNODE_2ub_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_ub) {
  float __pyx_v_ub;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_ub); {
    __pyx_v_ub = __pyx_PyFloat_AsFloat(__pyx_arg_ub); if (unlikely((__pyx_v_ub == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 423, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.TRANSNODE.ub.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_2ub___set__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self), ((float)__pyx_v_ub));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_9TRANSNODE_2ub___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_ub) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":425
 *         def __set__(self, float ub):
 * 
 *             self.inst.get().ub = (<float>ub)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->ub = ((float)__pyx_v_ub);

  /* "py_goicp.pyx":423
 * 
 *     property ub:
 *         def __set__(self, float ub):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().ub = (<float>ub)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":428
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().ub
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_2ub_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_2ub_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_2ub_2__get__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_2ub_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":429
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().ub             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->ub;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":430
 *         def __get__(self):
 *             cdef float _r = self.inst.get().ub
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":431
 *             cdef float _r = self.inst.get().ub
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property lb:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":428
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().ub
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.TRANSNODE.ub.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":434
 * 
 *     property lb:
 *         def __set__(self, float lb):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().lb = (<float>lb)
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_9TRANSNODE_2lb_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_lb); /*proto*/
static int __pyx_pw_8py_goicp_9TRANSNODE_2lb_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_lb) {
  float __pyx_v_lb;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_lb); {
    __pyx_v_lb = __pyx_PyFloat_AsFloat(__pyx_arg_lb); if (unlikely((__pyx_v_lb == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 434, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_goicp.TRANSNODE.lb.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_2lb___set__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self), ((float)__pyx_v_lb));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_9TRANSNODE_2lb___set__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, float __pyx_v_lb) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_goicp.pyx":436
 *         def __set__(self, float lb):
 * 
 *             self.inst.get().lb = (<float>lb)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->lb = ((float)__pyx_v_lb);

  /* "py_goicp.pyx":434
 * 
 *     property lb:
 *         def __set__(self, float lb):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().lb = (<float>lb)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":439
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().lb
 *             py_result = <float>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_2lb_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_2lb_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_2lb_2__get__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_2lb_2__get__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_goicp.pyx":440
 * 
 *         def __get__(self):
 *             cdef float _r = self.inst.get().lb             # <<<<<<<<<<<<<<
 *             py_result = <float>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->lb;
  __pyx_v__r = __pyx_t_1;

  /* "py_goicp.pyx":441
 *         def __get__(self):
 *             cdef float _r = self.inst.get().lb
 *             py_result = <float>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_goicp.pyx":442
 *             cdef float _r = self.inst.get().lb
 *             py_result = <float>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_goicp.pyx":439
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float _r = self.inst.get().lb
 *             py_result = <float>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_goicp.TRANSNODE.lb.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_goicp.pyx":444
 *             return py_result
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void TRANSNODE()"""
 *         self.inst = shared_ptr[_TRANSNODE](new _TRANSNODE())
 */

/* Python wrapper */
static int __pyx_pw_8py_goicp_9TRANSNODE_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8py_goicp_9TRANSNODE_2__init__[] = "Cython signature: void TRANSNODE()";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8py_goicp_9TRANSNODE_2__init__;
#endif
static int __pyx_pw_8py_goicp_9TRANSNODE_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_2__init__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8py_goicp_9TRANSNODE_2__init__(struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_goicp.pyx":446
 *     def __init__(self):
 *         """Cython signature: void TRANSNODE()"""
 *         self.inst = shared_ptr[_TRANSNODE](new _TRANSNODE())             # <<<<<<<<<<<<<<
 */
  __pyx_v_self->inst = boost::shared_ptr<TRANSNODE> (new TRANSNODE());

  /* "py_goicp.pyx":444
 *             return py_result
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void TRANSNODE()"""
 *         self.inst = shared_ptr[_TRANSNODE](new _TRANSNODE())
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_4__reduce_cython__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.TRANSNODE.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8py_goicp_9TRANSNODE_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8py_goicp_9TRANSNODE_6__setstate_cython__(((struct __pyx_obj_8py_goicp_TRANSNODE *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8py_goicp_9TRANSNODE_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8py_goicp_TRANSNODE *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_goicp.TRANSNODE.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const std::vector<std::vector<double> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8py_goicp_GoICP(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8py_goicp_GoICP *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8py_goicp_GoICP *)o);
  new((void*)&(p->inst)) boost::shared_ptr<GoICP> ();
  return o;
}

static void __pyx_tp_dealloc_8py_goicp_GoICP(PyObject *o) {
  struct __pyx_obj_8py_goicp_GoICP *p = (struct __pyx_obj_8py_goicp_GoICP *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8py_goicp_5GoICP_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_Nm(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_2Nm_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_Nm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_2Nm_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_Nd(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_2Nd_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_Nd(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_2Nd_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_MSEThresh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_9MSEThresh_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_MSEThresh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_9MSEThresh_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_SSEThresh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_9SSEThresh_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_SSEThresh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_9SSEThresh_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_icpThresh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_9icpThresh_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_icpThresh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_9icpThresh_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_trimFraction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_12trimFraction_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_trimFraction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_12trimFraction_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_timeLimit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_9timeLimit_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_timeLimit(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_9timeLimit_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_inlierNum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_9inlierNum_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_inlierNum(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_9inlierNum_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_5GoICP_doTrim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_5GoICP_6doTrim_3__get__(o);
}

static int __pyx_setprop_8py_goicp_5GoICP_doTrim(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_5GoICP_6doTrim_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8py_goicp_GoICP[] = {
  {"Register", (PyCFunction)__pyx_pw_8py_goicp_5GoICP_5Register, METH_NOARGS, __pyx_doc_8py_goicp_5GoICP_4Register},
  {"BuildDT", (PyCFunction)__pyx_pw_8py_goicp_5GoICP_7BuildDT, METH_NOARGS, __pyx_doc_8py_goicp_5GoICP_6BuildDT},
  {"optimalRotation", (PyCFunction)__pyx_pw_8py_goicp_5GoICP_9optimalRotation, METH_NOARGS, __pyx_doc_8py_goicp_5GoICP_8optimalRotation},
  {"optimalTranslation", (PyCFunction)__pyx_pw_8py_goicp_5GoICP_11optimalTranslation, METH_NOARGS, __pyx_doc_8py_goicp_5GoICP_10optimalTranslation},
  {"loadModelAndData", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8py_goicp_5GoICP_13loadModelAndData, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8py_goicp_5GoICP_12loadModelAndData},
  {"setInitNodeRot", (PyCFunction)__pyx_pw_8py_goicp_5GoICP_15setInitNodeRot, METH_O, __pyx_doc_8py_goicp_5GoICP_14setInitNodeRot},
  {"setInitNodeTrans", (PyCFunction)__pyx_pw_8py_goicp_5GoICP_17setInitNodeTrans, METH_O, __pyx_doc_8py_goicp_5GoICP_16setInitNodeTrans},
  {"setDTSizeAndFactor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8py_goicp_5GoICP_19setDTSizeAndFactor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8py_goicp_5GoICP_18setDTSizeAndFactor},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8py_goicp_5GoICP_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8py_goicp_5GoICP_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8py_goicp_GoICP[] = {
  {(char *)"Nm", __pyx_getprop_8py_goicp_5GoICP_Nm, __pyx_setprop_8py_goicp_5GoICP_Nm, (char *)0, 0},
  {(char *)"Nd", __pyx_getprop_8py_goicp_5GoICP_Nd, __pyx_setprop_8py_goicp_5GoICP_Nd, (char *)0, 0},
  {(char *)"MSEThresh", __pyx_getprop_8py_goicp_5GoICP_MSEThresh, __pyx_setprop_8py_goicp_5GoICP_MSEThresh, (char *)0, 0},
  {(char *)"SSEThresh", __pyx_getprop_8py_goicp_5GoICP_SSEThresh, __pyx_setprop_8py_goicp_5GoICP_SSEThresh, (char *)0, 0},
  {(char *)"icpThresh", __pyx_getprop_8py_goicp_5GoICP_icpThresh, __pyx_setprop_8py_goicp_5GoICP_icpThresh, (char *)0, 0},
  {(char *)"trimFraction", __pyx_getprop_8py_goicp_5GoICP_trimFraction, __pyx_setprop_8py_goicp_5GoICP_trimFraction, (char *)0, 0},
  {(char *)"timeLimit", __pyx_getprop_8py_goicp_5GoICP_timeLimit, __pyx_setprop_8py_goicp_5GoICP_timeLimit, (char *)0, 0},
  {(char *)"inlierNum", __pyx_getprop_8py_goicp_5GoICP_inlierNum, __pyx_setprop_8py_goicp_5GoICP_inlierNum, (char *)0, 0},
  {(char *)"doTrim", __pyx_getprop_8py_goicp_5GoICP_doTrim, __pyx_setprop_8py_goicp_5GoICP_doTrim, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8py_goicp_GoICP = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_goicp.GoICP", /*tp_name*/
  sizeof(struct __pyx_obj_8py_goicp_GoICP), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8py_goicp_GoICP, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython implementation of _GoICP\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8py_goicp_GoICP, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8py_goicp_GoICP, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8py_goicp_5GoICP_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8py_goicp_GoICP, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8py_goicp_POINT3D(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8py_goicp_POINT3D *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8py_goicp_POINT3D *)o);
  new((void*)&(p->inst)) boost::shared_ptr<POINT3D> ();
  return o;
}

static void __pyx_tp_dealloc_8py_goicp_POINT3D(PyObject *o) {
  struct __pyx_obj_8py_goicp_POINT3D *p = (struct __pyx_obj_8py_goicp_POINT3D *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8py_goicp_7POINT3D_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8py_goicp_7POINT3D_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7POINT3D_1x_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7POINT3D_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7POINT3D_1x_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_7POINT3D_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7POINT3D_1y_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7POINT3D_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7POINT3D_1y_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_7POINT3D_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7POINT3D_1z_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7POINT3D_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7POINT3D_1z_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8py_goicp_POINT3D[] = {
  {"_init_0", (PyCFunction)__pyx_pw_8py_goicp_7POINT3D_3_init_0, METH_NOARGS, __pyx_doc_8py_goicp_7POINT3D_2_init_0},
  {"_init_1", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8py_goicp_7POINT3D_5_init_1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8py_goicp_7POINT3D_4_init_1},
  {"pointToString", (PyCFunction)__pyx_pw_8py_goicp_7POINT3D_9pointToString, METH_NOARGS, __pyx_doc_8py_goicp_7POINT3D_8pointToString},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8py_goicp_7POINT3D_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8py_goicp_7POINT3D_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8py_goicp_POINT3D[] = {
  {(char *)"x", __pyx_getprop_8py_goicp_7POINT3D_x, __pyx_setprop_8py_goicp_7POINT3D_x, (char *)0, 0},
  {(char *)"y", __pyx_getprop_8py_goicp_7POINT3D_y, __pyx_setprop_8py_goicp_7POINT3D_y, (char *)0, 0},
  {(char *)"z", __pyx_getprop_8py_goicp_7POINT3D_z, __pyx_setprop_8py_goicp_7POINT3D_z, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8py_goicp_POINT3D = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_goicp.POINT3D", /*tp_name*/
  sizeof(struct __pyx_obj_8py_goicp_POINT3D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8py_goicp_POINT3D, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython implementation of _POINT3D\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8py_goicp_POINT3D, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8py_goicp_POINT3D, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8py_goicp_7POINT3D_7__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8py_goicp_POINT3D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8py_goicp_ROTNODE(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8py_goicp_ROTNODE *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8py_goicp_ROTNODE *)o);
  new((void*)&(p->inst)) boost::shared_ptr<ROTNODE> ();
  return o;
}

static void __pyx_tp_dealloc_8py_goicp_ROTNODE(PyObject *o) {
  struct __pyx_obj_8py_goicp_ROTNODE *p = (struct __pyx_obj_8py_goicp_ROTNODE *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8py_goicp_7ROTNODE_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8py_goicp_7ROTNODE_a(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7ROTNODE_1a_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7ROTNODE_a(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7ROTNODE_1a_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_7ROTNODE_b(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7ROTNODE_1b_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7ROTNODE_b(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7ROTNODE_1b_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_7ROTNODE_c(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7ROTNODE_1c_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7ROTNODE_c(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7ROTNODE_1c_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_7ROTNODE_w(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7ROTNODE_1w_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7ROTNODE_w(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7ROTNODE_1w_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_7ROTNODE_ub(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7ROTNODE_2ub_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7ROTNODE_ub(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7ROTNODE_2ub_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_7ROTNODE_lb(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7ROTNODE_2lb_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7ROTNODE_lb(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7ROTNODE_2lb_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_7ROTNODE_l(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_7ROTNODE_1l_3__get__(o);
}

static int __pyx_setprop_8py_goicp_7ROTNODE_l(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_7ROTNODE_1l_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8py_goicp_ROTNODE[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8py_goicp_7ROTNODE_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8py_goicp_7ROTNODE_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8py_goicp_ROTNODE[] = {
  {(char *)"a", __pyx_getprop_8py_goicp_7ROTNODE_a, __pyx_setprop_8py_goicp_7ROTNODE_a, (char *)0, 0},
  {(char *)"b", __pyx_getprop_8py_goicp_7ROTNODE_b, __pyx_setprop_8py_goicp_7ROTNODE_b, (char *)0, 0},
  {(char *)"c", __pyx_getprop_8py_goicp_7ROTNODE_c, __pyx_setprop_8py_goicp_7ROTNODE_c, (char *)0, 0},
  {(char *)"w", __pyx_getprop_8py_goicp_7ROTNODE_w, __pyx_setprop_8py_goicp_7ROTNODE_w, (char *)0, 0},
  {(char *)"ub", __pyx_getprop_8py_goicp_7ROTNODE_ub, __pyx_setprop_8py_goicp_7ROTNODE_ub, (char *)0, 0},
  {(char *)"lb", __pyx_getprop_8py_goicp_7ROTNODE_lb, __pyx_setprop_8py_goicp_7ROTNODE_lb, (char *)0, 0},
  {(char *)"l", __pyx_getprop_8py_goicp_7ROTNODE_l, __pyx_setprop_8py_goicp_7ROTNODE_l, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8py_goicp_ROTNODE = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_goicp.ROTNODE", /*tp_name*/
  sizeof(struct __pyx_obj_8py_goicp_ROTNODE), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8py_goicp_ROTNODE, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython implementation of _ROTNODE\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8py_goicp_ROTNODE, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8py_goicp_ROTNODE, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8py_goicp_7ROTNODE_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8py_goicp_ROTNODE, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8py_goicp_TRANSNODE(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8py_goicp_TRANSNODE *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8py_goicp_TRANSNODE *)o);
  new((void*)&(p->inst)) boost::shared_ptr<TRANSNODE> ();
  return o;
}

static void __pyx_tp_dealloc_8py_goicp_TRANSNODE(PyObject *o) {
  struct __pyx_obj_8py_goicp_TRANSNODE *p = (struct __pyx_obj_8py_goicp_TRANSNODE *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8py_goicp_9TRANSNODE_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8py_goicp_9TRANSNODE_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_9TRANSNODE_1x_3__get__(o);
}

static int __pyx_setprop_8py_goicp_9TRANSNODE_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_9TRANSNODE_1x_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_9TRANSNODE_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_9TRANSNODE_1y_3__get__(o);
}

static int __pyx_setprop_8py_goicp_9TRANSNODE_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_9TRANSNODE_1y_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_9TRANSNODE_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_9TRANSNODE_1z_3__get__(o);
}

static int __pyx_setprop_8py_goicp_9TRANSNODE_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_9TRANSNODE_1z_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_9TRANSNODE_w(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_9TRANSNODE_1w_3__get__(o);
}

static int __pyx_setprop_8py_goicp_9TRANSNODE_w(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_9TRANSNODE_1w_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_9TRANSNODE_ub(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_9TRANSNODE_2ub_3__get__(o);
}

static int __pyx_setprop_8py_goicp_9TRANSNODE_ub(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_9TRANSNODE_2ub_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8py_goicp_9TRANSNODE_lb(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8py_goicp_9TRANSNODE_2lb_3__get__(o);
}

static int __pyx_setprop_8py_goicp_9TRANSNODE_lb(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8py_goicp_9TRANSNODE_2lb_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8py_goicp_TRANSNODE[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8py_goicp_9TRANSNODE_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8py_goicp_9TRANSNODE_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8py_goicp_TRANSNODE[] = {
  {(char *)"x", __pyx_getprop_8py_goicp_9TRANSNODE_x, __pyx_setprop_8py_goicp_9TRANSNODE_x, (char *)0, 0},
  {(char *)"y", __pyx_getprop_8py_goicp_9TRANSNODE_y, __pyx_setprop_8py_goicp_9TRANSNODE_y, (char *)0, 0},
  {(char *)"z", __pyx_getprop_8py_goicp_9TRANSNODE_z, __pyx_setprop_8py_goicp_9TRANSNODE_z, (char *)0, 0},
  {(char *)"w", __pyx_getprop_8py_goicp_9TRANSNODE_w, __pyx_setprop_8py_goicp_9TRANSNODE_w, (char *)0, 0},
  {(char *)"ub", __pyx_getprop_8py_goicp_9TRANSNODE_ub, __pyx_setprop_8py_goicp_9TRANSNODE_ub, (char *)0, 0},
  {(char *)"lb", __pyx_getprop_8py_goicp_9TRANSNODE_lb, __pyx_setprop_8py_goicp_9TRANSNODE_lb, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8py_goicp_TRANSNODE = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_goicp.TRANSNODE", /*tp_name*/
  sizeof(struct __pyx_obj_8py_goicp_TRANSNODE), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8py_goicp_TRANSNODE, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython implementation of _TRANSNODE\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8py_goicp_TRANSNODE, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8py_goicp_TRANSNODE, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8py_goicp_9TRANSNODE_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8py_goicp_TRANSNODE, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *__pyx_freelist_8py_goicp___pyx_scope_struct__loadModelAndData[8];
static int __pyx_freecount_8py_goicp___pyx_scope_struct__loadModelAndData = 0;

static PyObject *__pyx_tp_new_8py_goicp___pyx_scope_struct__loadModelAndData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8py_goicp___pyx_scope_struct__loadModelAndData > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData)))) {
    o = (PyObject*)__pyx_freelist_8py_goicp___pyx_scope_struct__loadModelAndData[--__pyx_freecount_8py_goicp___pyx_scope_struct__loadModelAndData];
    memset(o, 0, sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8py_goicp___pyx_scope_struct__loadModelAndData(PyObject *o) {
  struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *p = (struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_1);
  Py_CLEAR(p->__pyx_v_in_3);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8py_goicp___pyx_scope_struct__loadModelAndData < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData)))) {
    __pyx_freelist_8py_goicp___pyx_scope_struct__loadModelAndData[__pyx_freecount_8py_goicp___pyx_scope_struct__loadModelAndData++] = ((struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8py_goicp___pyx_scope_struct__loadModelAndData(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *p = (struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *)o;
  if (p->__pyx_v_in_1) {
    e = (*v)(p->__pyx_v_in_1, a); if (e) return e;
  }
  if (p->__pyx_v_in_3) {
    e = (*v)(p->__pyx_v_in_3, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8py_goicp___pyx_scope_struct__loadModelAndData(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *p = (struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData *)o;
  tmp = ((PyObject*)p->__pyx_v_in_1);
  p->__pyx_v_in_1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_in_3);
  p->__pyx_v_in_3 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8py_goicp___pyx_scope_struct__loadModelAndData = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_goicp.__pyx_scope_struct__loadModelAndData", /*tp_name*/
  sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct__loadModelAndData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8py_goicp___pyx_scope_struct__loadModelAndData, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8py_goicp___pyx_scope_struct__loadModelAndData, /*tp_traverse*/
  __pyx_tp_clear_8py_goicp___pyx_scope_struct__loadModelAndData, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8py_goicp___pyx_scope_struct__loadModelAndData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *__pyx_freelist_8py_goicp___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_8py_goicp___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_8py_goicp___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8py_goicp___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8py_goicp___pyx_scope_struct_1_genexpr[--__pyx_freecount_8py_goicp___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8py_goicp___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8py_goicp___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_8py_goicp___pyx_scope_struct_1_genexpr[__pyx_freecount_8py_goicp___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8py_goicp___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8py_goicp___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_goicp.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8py_goicp___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8py_goicp___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8py_goicp___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *__pyx_freelist_8py_goicp___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_8py_goicp___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_8py_goicp___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8py_goicp___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8py_goicp___pyx_scope_struct_2_genexpr[--__pyx_freecount_8py_goicp___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8py_goicp___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8py_goicp___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_8py_goicp___pyx_scope_struct_2_genexpr[__pyx_freecount_8py_goicp___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8py_goicp___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8py_goicp___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_goicp.__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8py_goicp___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8py_goicp___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8py_goicp___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8py_goicp___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_py_goicp(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_py_goicp},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "py_goicp",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_GoICP, __pyx_k_GoICP, sizeof(__pyx_k_GoICP), 0, 0, 1, 1},
  {&__pyx_n_s_POINT3D, __pyx_k_POINT3D, sizeof(__pyx_k_POINT3D), 0, 0, 1, 1},
  {&__pyx_n_s_ROTNODE, __pyx_k_ROTNODE, sizeof(__pyx_k_ROTNODE), 0, 0, 1, 1},
  {&__pyx_n_s_TRANSNODE, __pyx_k_TRANSNODE, sizeof(__pyx_k_TRANSNODE), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_arg_in_0_wrong_type, __pyx_k_arg_in_0_wrong_type, sizeof(__pyx_k_arg_in_0_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_1_wrong_type, __pyx_k_arg_in_1_wrong_type, sizeof(__pyx_k_arg_in_1_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_2_wrong_type, __pyx_k_arg_in_2_wrong_type, sizeof(__pyx_k_arg_in_2_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_3_wrong_type, __pyx_k_arg_in_3_wrong_type, sizeof(__pyx_k_arg_in_3_wrong_type), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_s_can_not_handle_type_of_s, __pyx_k_can_not_handle_type_of_s, sizeof(__pyx_k_can_not_handle_type_of_s), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_in_0, __pyx_k_in_0, sizeof(__pyx_k_in_0), 0, 0, 1, 1},
  {&__pyx_n_s_in_1, __pyx_k_in_1, sizeof(__pyx_k_in_1), 0, 0, 1, 1},
  {&__pyx_n_s_in_2, __pyx_k_in_2, sizeof(__pyx_k_in_2), 0, 0, 1, 1},
  {&__pyx_n_s_in_3, __pyx_k_in_3, sizeof(__pyx_k_in_3), 0, 0, 1, 1},
  {&__pyx_n_s_init_0, __pyx_k_init_0, sizeof(__pyx_k_init_0), 0, 0, 1, 1},
  {&__pyx_n_s_init_1, __pyx_k_init_1, sizeof(__pyx_k_init_1), 0, 0, 1, 1},
  {&__pyx_n_s_loadModelAndData_locals_genexpr, __pyx_k_loadModelAndData_locals_genexpr, sizeof(__pyx_k_loadModelAndData_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_py_goicp, __pyx_k_py_goicp, sizeof(__pyx_k_py_goicp), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_kp_s_self_inst_cannot_be_converted_to, __pyx_k_self_inst_cannot_be_converted_to, sizeof(__pyx_k_self_inst_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 61, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8py_goicp_GoICP) < 0) __PYX_ERR(1, 25, __pyx_L1_error)
  __pyx_type_8py_goicp_GoICP.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8py_goicp_GoICP.tp_dictoffset && __pyx_type_8py_goicp_GoICP.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8py_goicp_GoICP.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8py_goicp_GoICP, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 25, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8py_goicp_5GoICP_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8py_goicp_5GoICP_2__init__.doc = __pyx_doc_8py_goicp_5GoICP_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8py_goicp_5GoICP_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GoICP, (PyObject *)&__pyx_type_8py_goicp_GoICP) < 0) __PYX_ERR(1, 25, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8py_goicp_GoICP) < 0) __PYX_ERR(1, 25, __pyx_L1_error)
  __pyx_ptype_8py_goicp_GoICP = &__pyx_type_8py_goicp_GoICP;
  if (PyType_Ready(&__pyx_type_8py_goicp_POINT3D) < 0) __PYX_ERR(1, 201, __pyx_L1_error)
  __pyx_type_8py_goicp_POINT3D.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8py_goicp_POINT3D.tp_dictoffset && __pyx_type_8py_goicp_POINT3D.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8py_goicp_POINT3D.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8py_goicp_POINT3D, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 201, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8py_goicp_7POINT3D_6__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8py_goicp_7POINT3D_6__init__.doc = __pyx_doc_8py_goicp_7POINT3D_6__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8py_goicp_7POINT3D_6__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_POINT3D, (PyObject *)&__pyx_type_8py_goicp_POINT3D) < 0) __PYX_ERR(1, 201, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8py_goicp_POINT3D) < 0) __PYX_ERR(1, 201, __pyx_L1_error)
  __pyx_ptype_8py_goicp_POINT3D = &__pyx_type_8py_goicp_POINT3D;
  if (PyType_Ready(&__pyx_type_8py_goicp_ROTNODE) < 0) __PYX_ERR(1, 275, __pyx_L1_error)
  __pyx_type_8py_goicp_ROTNODE.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8py_goicp_ROTNODE.tp_dictoffset && __pyx_type_8py_goicp_ROTNODE.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8py_goicp_ROTNODE.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8py_goicp_ROTNODE, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 275, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8py_goicp_7ROTNODE_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8py_goicp_7ROTNODE_2__init__.doc = __pyx_doc_8py_goicp_7ROTNODE_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8py_goicp_7ROTNODE_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ROTNODE, (PyObject *)&__pyx_type_8py_goicp_ROTNODE) < 0) __PYX_ERR(1, 275, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8py_goicp_ROTNODE) < 0) __PYX_ERR(1, 275, __pyx_L1_error)
  __pyx_ptype_8py_goicp_ROTNODE = &__pyx_type_8py_goicp_ROTNODE;
  if (PyType_Ready(&__pyx_type_8py_goicp_TRANSNODE) < 0) __PYX_ERR(1, 367, __pyx_L1_error)
  __pyx_type_8py_goicp_TRANSNODE.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8py_goicp_TRANSNODE.tp_dictoffset && __pyx_type_8py_goicp_TRANSNODE.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8py_goicp_TRANSNODE.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8py_goicp_TRANSNODE, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 367, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8py_goicp_9TRANSNODE_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8py_goicp_9TRANSNODE_2__init__.doc = __pyx_doc_8py_goicp_9TRANSNODE_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8py_goicp_9TRANSNODE_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TRANSNODE, (PyObject *)&__pyx_type_8py_goicp_TRANSNODE) < 0) __PYX_ERR(1, 367, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8py_goicp_TRANSNODE) < 0) __PYX_ERR(1, 367, __pyx_L1_error)
  __pyx_ptype_8py_goicp_TRANSNODE = &__pyx_type_8py_goicp_TRANSNODE;
  if (PyType_Ready(&__pyx_type_8py_goicp___pyx_scope_struct__loadModelAndData) < 0) __PYX_ERR(1, 161, __pyx_L1_error)
  __pyx_type_8py_goicp___pyx_scope_struct__loadModelAndData.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8py_goicp___pyx_scope_struct__loadModelAndData.tp_dictoffset && __pyx_type_8py_goicp___pyx_scope_struct__loadModelAndData.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8py_goicp___pyx_scope_struct__loadModelAndData.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8py_goicp___pyx_scope_struct__loadModelAndData = &__pyx_type_8py_goicp___pyx_scope_struct__loadModelAndData;
  if (PyType_Ready(&__pyx_type_8py_goicp___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(1, 164, __pyx_L1_error)
  __pyx_type_8py_goicp___pyx_scope_struct_1_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8py_goicp___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_8py_goicp___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8py_goicp___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8py_goicp___pyx_scope_struct_1_genexpr = &__pyx_type_8py_goicp___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_8py_goicp___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_type_8py_goicp___pyx_scope_struct_2_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8py_goicp___pyx_scope_struct_2_genexpr.tp_dictoffset && __pyx_type_8py_goicp___pyx_scope_struct_2_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8py_goicp___pyx_scope_struct_2_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8py_goicp___pyx_scope_struct_2_genexpr = &__pyx_type_8py_goicp___pyx_scope_struct_2_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpy_goicp(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpy_goicp(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_py_goicp(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_py_goicp(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_py_goicp(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'py_goicp' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_py_goicp(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("py_goicp", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_py_goicp) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "py_goicp")) {
      if (unlikely(PyDict_SetItemString(modules, "py_goicp", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "py_goicp.pyx":1
 * #cython: c_string_encoding=ascii  # for cython>=0.19             # <<<<<<<<<<<<<<
 * #cython: embedsignature=False
 * from  libcpp.string  cimport string as libcpp_string
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init py_goicp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init py_goicp");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
